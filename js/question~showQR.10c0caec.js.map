{"version":3,"sources":["webpack:///./src/components/ViewAnswer.vue?2438","webpack:///src/components/ViewAnswer.vue","webpack:///./src/components/ViewAnswer.vue?d624","webpack:///./src/components/ViewAnswer.vue?b7cc","webpack:///./src/components/ViewAnswer.vue?a54a","webpack:///./node_modules/qrcode.vue/dist/qrcode.vue.esm.js"],"names":["render","_vm","this","_h","$createElement","_c","_self","base","status","staticClass","_v","_e","_s","question","style","border-color","color","valid","on","click","$event","cancel","staticRenderFns","ViewAnswervue_type_script_lang_js_","name","props","components_ViewAnswervue_type_script_lang_js_","component","Object","componentNormalizer","options","__file","__webpack_exports__","_node_modules_mini_css_extract_plugin_dist_loader_js_ref_6_oneOf_1_0_node_modules_css_loader_index_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_lib_index_js_ref_6_oneOf_1_2_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ViewAnswer_vue_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","_node_modules_mini_css_extract_plugin_dist_loader_js_ref_6_oneOf_1_0_node_modules_css_loader_index_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_lib_index_js_ref_6_oneOf_1_2_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ViewAnswer_vue_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_0___default","n","mode","MODE_NUMBER","MODE_ALPHA_NUM","MODE_8BIT_BYTE","MODE_KANJI","QR8bitByte","data","prototype","getLength","buffer","length","write","i","put","charCodeAt","_8BitByte","ErrorCorrectLevel","L","M","Q","H","QRRSBlock","totalCount","dataCount","RS_BLOCK_TABLE","getRSBlocks","typeNumber","errorCorrectLevel","rsBlock","getRsBlockTable","undefined","Error","list","Array","count","j","push","RSBlock","QRBitBuffer","get","index","bufIndex","Math","floor","num","putBit","getLengthInBits","bit","BitBuffer","QRMath","glog","LOG_TABLE","gexp","EXP_TABLE","math","QRPolynomial","shift","offset","multiply","e","mod","ratio","Polynomial","QRMaskPattern","PATTERN000","PATTERN001","PATTERN010","PATTERN011","PATTERN100","PATTERN101","PATTERN110","PATTERN111","QRUtil","PATTERN_POSITION_TABLE","G15","G18","G15_MASK","getBCHTypeInfo","d","getBCHDigit","getBCHTypeNumber","digit","getPatternPosition","getMask","maskPattern","getErrorCorrectPolynomial","errorCorrectLength","a","mode$$1","type","getLostPoint","qrCode","moduleCount","getModuleCount","lostPoint","row","col","sameCount","dark","isDark","r","c","darkCount","abs","util","QRCode","modules","dataCache","dataList","proto","addData","newData","make","rsBlocks","totalDataCount","makeImpl","getBestMaskPattern","test","setupPositionProbePattern","setupPositionAdjustPattern","setupTimingPattern","setupTypeInfo","setupTypeNumber","createData","mapData","minLostPoint","pattern","createMovieClip","target_mc","instance_name","depth","qr_mc","createEmptyMovieClip","cs","y","x","beginFill","moveTo","lineTo","endFill","pos","bits","inc","bitIndex","byteIndex","mask","PAD0","PAD1","createBytes","maxDcCount","maxEcCount","dcdata","ecdata","dcCount","ecCount","max","rsPoly","rawPoly","modPoly","modIndex","totalCodeCount","QRCode_1","getBackingStorePixelRatio","ctx","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","toUTF8String","str","utf8Str","charCode","String","fromCharCode","QrcodeVue","createElement","className","value","level","background","foreground","size","class","attrs","height","width","ref","required","default","Number","validator","s","isNaN","l","indexOf","methods","_size","canvas","$refs","getContext","cells","tileW","tileH","scale","window","devicePixelRatio","forEach","rdx","cell","cdx","fillStyle","w","ceil","h","fillRect","round","updated","mounted"],"mappings":"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","file":"js/question~showQR.10c0caec.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[(_vm.base.status == 'STARTED')?_c('div',[_c('h1',{staticClass:\"title\"},[_vm._v(\"Aan het wachten op antwoord...\")])]):_vm._e(),_c('br'),_c('h1',[_vm._v(_vm._s(_vm.base.question))]),_c('br'),(_vm.base.status == 'ACCEPTED')?_c('div',[(_vm.valid)?_c('div',{staticClass:\"answer\",style:({'border-color': _vm.base.color})},[_c('p',[_vm._v(\"Antwoord ontvangen en valide\")])]):_vm._e(),(!_vm.valid)?_c('div',[_c('p',[_vm._v(\"Antwoord ontvangen maar invalide\")])]):_vm._e()]):_vm._e(),(_vm.base.status == 'DENIED')?_c('div',[_c('p',[_vm._v(\"Vraag is geweigerd\")])]):_vm._e(),_c('br'),_c('div',[_c('button',{staticClass:\"button is-link\",on:{\"click\":function($event){_vm.base.cancel()}}},[_vm._v(\"Annuleren\")])])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div>\n    <div v-if=\"base.status == 'STARTED'\">\n      <h1 class=\"title\">Aan het wachten op antwoord...</h1>\n    </div>\n    <br>\n    <h1>{{base.question}}</h1>\n    <br>\n\n    <div v-if=\"base.status == 'ACCEPTED'\">\n      <div v-if=\"valid\" class=\"answer\" :style=\"{'border-color': base.color}\">\n        <p>Antwoord ontvangen en valide</p>\n      </div>\n      <div v-if=\"!valid\">\n        <p>Antwoord ontvangen maar invalide</p>\n      </div> \n    </div>\n    <div v-if=\"base.status == 'DENIED'\">\n      <p>Vraag is geweigerd</p>\n    </div>\n    <!-- <div class=\"answer\" :style=\"{'border-color':base.color}\">\n    <div v-if=\"pictureUrl && status === 'ACCEPTED' && base.valid\">\n      <img :src=\"pictureUrl\" width=\"50%\">\n    </div>\n    <div>\n      <h1 class=\"title\">Antwoord</h1>\n      <h2 class=\"subtitle\">{{base.question}}</h2>\n\n      <div class=\"has-text-centered\">\n        <div v-if=\"base.status === 'ACCEPTED'\">\n          <p v-if=\"base.valid\" class=\"isOK\">\n            <span>\n              <i class=\"fa fa-check fa-3x\" aria-hidden=\"true\"></i>\n            </span>\n            &nbsp;\n            <span>OK</span>\n          </p>\n          <p v-else class=\"isNotOK\">\n            <span>\n              <i class=\"fa fa-bolt fa-3x\" aria-hidden=\"true\"></i>\n            </span>\n            &nbsp;\n            <span>Nee</span>\n          </p>\n        </div>\n        <div v-else-if=\"base.status === 'DENIED'\">\n          <p class=\"isNotOK\">\n            <span>\n              <i class=\"fa fa-times fa-3x\" aria-hidden=\"true\"></i>\n            </span>\n            &nbsp;\n            <span>Vraag is geweigerd</span>\n          </p>\n        </div>\n      </div>\n\n      <br>\n    </div>\n    </div> -->\n    <br>\n    <div>\n      <button class=\"button is-link\" @click=\"base.cancel()\">Annuleren</button>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"Answer\",\n  props: [\"base\"]\n};\n</script>\n\n<style>\n.picture {\n  border-style: solid;\n  border-width: thick;\n  border-radius: 5px;\n}\n.answer {\n  border-style: solid;\n  border-width: 20px;\n  border-radius: 10px;\n}\n.isOK {\n  color: green;\n}\n.isNotOK {\n  color: red;\n}\n</style>\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ViewAnswer.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ViewAnswer.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ViewAnswer.vue?vue&type=template&id=48aade00&\"\nimport script from \"./ViewAnswer.vue?vue&type=script&lang=js&\"\nexport * from \"./ViewAnswer.vue?vue&type=script&lang=js&\"\nimport style0 from \"./ViewAnswer.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\ncomponent.options.__file = \"ViewAnswer.vue\"\nexport default component.exports","import mod from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/index.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/lib/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ViewAnswer.vue?vue&type=style&index=0&lang=css&\"; export default mod; export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/index.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/lib/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ViewAnswer.vue?vue&type=style&index=0&lang=css&\"","/*!\n * qrcode.vue v1.6.1\n * A Vue component for QRCode.\n * © 2017-2018 @scopewu\n * MIT License.\n */\nvar mode = {\n  MODE_NUMBER: 1 << 0,\n  MODE_ALPHA_NUM: 1 << 1,\n  MODE_8BIT_BYTE: 1 << 2,\n  MODE_KANJI: 1 << 3\n};\n\nfunction QR8bitByte(data) {\n  this.mode = mode.MODE_8BIT_BYTE;\n  this.data = data;\n}\n\nQR8bitByte.prototype = {\n  getLength: function (buffer) {\n    return this.data.length;\n  },\n  write: function (buffer) {\n    for (var i = 0; i < this.data.length; i++) {\n      // not JIS ...\n      buffer.put(this.data.charCodeAt(i), 8);\n    }\n  }\n};\nvar _8BitByte = QR8bitByte;\n\nvar ErrorCorrectLevel = {\n  L: 1,\n  M: 0,\n  Q: 3,\n  H: 2\n};\n\nfunction QRRSBlock(totalCount, dataCount) {\n  this.totalCount = totalCount;\n  this.dataCount = dataCount;\n}\n\nQRRSBlock.RS_BLOCK_TABLE = [// L\n// M\n// Q\n// H\n// 1\n[1, 26, 19], [1, 26, 16], [1, 26, 13], [1, 26, 9], // 2\n[1, 44, 34], [1, 44, 28], [1, 44, 22], [1, 44, 16], // 3\n[1, 70, 55], [1, 70, 44], [2, 35, 17], [2, 35, 13], // 4\t\t\n[1, 100, 80], [2, 50, 32], [2, 50, 24], [4, 25, 9], // 5\n[1, 134, 108], [2, 67, 43], [2, 33, 15, 2, 34, 16], [2, 33, 11, 2, 34, 12], // 6\n[2, 86, 68], [4, 43, 27], [4, 43, 19], [4, 43, 15], // 7\t\t\n[2, 98, 78], [4, 49, 31], [2, 32, 14, 4, 33, 15], [4, 39, 13, 1, 40, 14], // 8\n[2, 121, 97], [2, 60, 38, 2, 61, 39], [4, 40, 18, 2, 41, 19], [4, 40, 14, 2, 41, 15], // 9\n[2, 146, 116], [3, 58, 36, 2, 59, 37], [4, 36, 16, 4, 37, 17], [4, 36, 12, 4, 37, 13], // 10\t\t\n[2, 86, 68, 2, 87, 69], [4, 69, 43, 1, 70, 44], [6, 43, 19, 2, 44, 20], [6, 43, 15, 2, 44, 16], // 11\n[4, 101, 81], [1, 80, 50, 4, 81, 51], [4, 50, 22, 4, 51, 23], [3, 36, 12, 8, 37, 13], // 12\n[2, 116, 92, 2, 117, 93], [6, 58, 36, 2, 59, 37], [4, 46, 20, 6, 47, 21], [7, 42, 14, 4, 43, 15], // 13\n[4, 133, 107], [8, 59, 37, 1, 60, 38], [8, 44, 20, 4, 45, 21], [12, 33, 11, 4, 34, 12], // 14\n[3, 145, 115, 1, 146, 116], [4, 64, 40, 5, 65, 41], [11, 36, 16, 5, 37, 17], [11, 36, 12, 5, 37, 13], // 15\n[5, 109, 87, 1, 110, 88], [5, 65, 41, 5, 66, 42], [5, 54, 24, 7, 55, 25], [11, 36, 12], // 16\n[5, 122, 98, 1, 123, 99], [7, 73, 45, 3, 74, 46], [15, 43, 19, 2, 44, 20], [3, 45, 15, 13, 46, 16], // 17\n[1, 135, 107, 5, 136, 108], [10, 74, 46, 1, 75, 47], [1, 50, 22, 15, 51, 23], [2, 42, 14, 17, 43, 15], // 18\n[5, 150, 120, 1, 151, 121], [9, 69, 43, 4, 70, 44], [17, 50, 22, 1, 51, 23], [2, 42, 14, 19, 43, 15], // 19\n[3, 141, 113, 4, 142, 114], [3, 70, 44, 11, 71, 45], [17, 47, 21, 4, 48, 22], [9, 39, 13, 16, 40, 14], // 20\n[3, 135, 107, 5, 136, 108], [3, 67, 41, 13, 68, 42], [15, 54, 24, 5, 55, 25], [15, 43, 15, 10, 44, 16], // 21\n[4, 144, 116, 4, 145, 117], [17, 68, 42], [17, 50, 22, 6, 51, 23], [19, 46, 16, 6, 47, 17], // 22\n[2, 139, 111, 7, 140, 112], [17, 74, 46], [7, 54, 24, 16, 55, 25], [34, 37, 13], // 23\n[4, 151, 121, 5, 152, 122], [4, 75, 47, 14, 76, 48], [11, 54, 24, 14, 55, 25], [16, 45, 15, 14, 46, 16], // 24\n[6, 147, 117, 4, 148, 118], [6, 73, 45, 14, 74, 46], [11, 54, 24, 16, 55, 25], [30, 46, 16, 2, 47, 17], // 25\n[8, 132, 106, 4, 133, 107], [8, 75, 47, 13, 76, 48], [7, 54, 24, 22, 55, 25], [22, 45, 15, 13, 46, 16], // 26\n[10, 142, 114, 2, 143, 115], [19, 74, 46, 4, 75, 47], [28, 50, 22, 6, 51, 23], [33, 46, 16, 4, 47, 17], // 27\n[8, 152, 122, 4, 153, 123], [22, 73, 45, 3, 74, 46], [8, 53, 23, 26, 54, 24], [12, 45, 15, 28, 46, 16], // 28\n[3, 147, 117, 10, 148, 118], [3, 73, 45, 23, 74, 46], [4, 54, 24, 31, 55, 25], [11, 45, 15, 31, 46, 16], // 29\n[7, 146, 116, 7, 147, 117], [21, 73, 45, 7, 74, 46], [1, 53, 23, 37, 54, 24], [19, 45, 15, 26, 46, 16], // 30\n[5, 145, 115, 10, 146, 116], [19, 75, 47, 10, 76, 48], [15, 54, 24, 25, 55, 25], [23, 45, 15, 25, 46, 16], // 31\n[13, 145, 115, 3, 146, 116], [2, 74, 46, 29, 75, 47], [42, 54, 24, 1, 55, 25], [23, 45, 15, 28, 46, 16], // 32\n[17, 145, 115], [10, 74, 46, 23, 75, 47], [10, 54, 24, 35, 55, 25], [19, 45, 15, 35, 46, 16], // 33\n[17, 145, 115, 1, 146, 116], [14, 74, 46, 21, 75, 47], [29, 54, 24, 19, 55, 25], [11, 45, 15, 46, 46, 16], // 34\n[13, 145, 115, 6, 146, 116], [14, 74, 46, 23, 75, 47], [44, 54, 24, 7, 55, 25], [59, 46, 16, 1, 47, 17], // 35\n[12, 151, 121, 7, 152, 122], [12, 75, 47, 26, 76, 48], [39, 54, 24, 14, 55, 25], [22, 45, 15, 41, 46, 16], // 36\n[6, 151, 121, 14, 152, 122], [6, 75, 47, 34, 76, 48], [46, 54, 24, 10, 55, 25], [2, 45, 15, 64, 46, 16], // 37\n[17, 152, 122, 4, 153, 123], [29, 74, 46, 14, 75, 47], [49, 54, 24, 10, 55, 25], [24, 45, 15, 46, 46, 16], // 38\n[4, 152, 122, 18, 153, 123], [13, 74, 46, 32, 75, 47], [48, 54, 24, 14, 55, 25], [42, 45, 15, 32, 46, 16], // 39\n[20, 147, 117, 4, 148, 118], [40, 75, 47, 7, 76, 48], [43, 54, 24, 22, 55, 25], [10, 45, 15, 67, 46, 16], // 40\n[19, 148, 118, 6, 149, 119], [18, 75, 47, 31, 76, 48], [34, 54, 24, 34, 55, 25], [20, 45, 15, 61, 46, 16]];\n\nQRRSBlock.getRSBlocks = function (typeNumber, errorCorrectLevel) {\n  var rsBlock = QRRSBlock.getRsBlockTable(typeNumber, errorCorrectLevel);\n\n  if (rsBlock == undefined) {\n    throw new Error(\"bad rs block @ typeNumber:\" + typeNumber + \"/errorCorrectLevel:\" + errorCorrectLevel);\n  }\n\n  var length = rsBlock.length / 3;\n  var list = new Array();\n\n  for (var i = 0; i < length; i++) {\n    var count = rsBlock[i * 3 + 0];\n    var totalCount = rsBlock[i * 3 + 1];\n    var dataCount = rsBlock[i * 3 + 2];\n\n    for (var j = 0; j < count; j++) {\n      list.push(new QRRSBlock(totalCount, dataCount));\n    }\n  }\n\n  return list;\n};\n\nQRRSBlock.getRsBlockTable = function (typeNumber, errorCorrectLevel) {\n  switch (errorCorrectLevel) {\n    case ErrorCorrectLevel.L:\n      return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0];\n\n    case ErrorCorrectLevel.M:\n      return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];\n\n    case ErrorCorrectLevel.Q:\n      return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];\n\n    case ErrorCorrectLevel.H:\n      return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];\n\n    default:\n      return undefined;\n  }\n};\n\nvar RSBlock = QRRSBlock;\n\nfunction QRBitBuffer() {\n  this.buffer = new Array();\n  this.length = 0;\n}\n\nQRBitBuffer.prototype = {\n  get: function (index) {\n    var bufIndex = Math.floor(index / 8);\n    return (this.buffer[bufIndex] >>> 7 - index % 8 & 1) == 1;\n  },\n  put: function (num, length) {\n    for (var i = 0; i < length; i++) {\n      this.putBit((num >>> length - i - 1 & 1) == 1);\n    }\n  },\n  getLengthInBits: function () {\n    return this.length;\n  },\n  putBit: function (bit) {\n    var bufIndex = Math.floor(this.length / 8);\n\n    if (this.buffer.length <= bufIndex) {\n      this.buffer.push(0);\n    }\n\n    if (bit) {\n      this.buffer[bufIndex] |= 0x80 >>> this.length % 8;\n    }\n\n    this.length++;\n  }\n};\nvar BitBuffer = QRBitBuffer;\n\nvar QRMath = {\n  glog: function (n) {\n    if (n < 1) {\n      throw new Error(\"glog(\" + n + \")\");\n    }\n\n    return QRMath.LOG_TABLE[n];\n  },\n  gexp: function (n) {\n    while (n < 0) {\n      n += 255;\n    }\n\n    while (n >= 256) {\n      n -= 255;\n    }\n\n    return QRMath.EXP_TABLE[n];\n  },\n  EXP_TABLE: new Array(256),\n  LOG_TABLE: new Array(256)\n};\n\nfor (var i = 0; i < 8; i++) {\n  QRMath.EXP_TABLE[i] = 1 << i;\n}\n\nfor (var i = 8; i < 256; i++) {\n  QRMath.EXP_TABLE[i] = QRMath.EXP_TABLE[i - 4] ^ QRMath.EXP_TABLE[i - 5] ^ QRMath.EXP_TABLE[i - 6] ^ QRMath.EXP_TABLE[i - 8];\n}\n\nfor (var i = 0; i < 255; i++) {\n  QRMath.LOG_TABLE[QRMath.EXP_TABLE[i]] = i;\n}\n\nvar math = QRMath;\n\nfunction QRPolynomial(num, shift) {\n  if (num.length == undefined) {\n    throw new Error(num.length + \"/\" + shift);\n  }\n\n  var offset = 0;\n\n  while (offset < num.length && num[offset] == 0) {\n    offset++;\n  }\n\n  this.num = new Array(num.length - offset + shift);\n\n  for (var i = 0; i < num.length - offset; i++) {\n    this.num[i] = num[i + offset];\n  }\n}\n\nQRPolynomial.prototype = {\n  get: function (index) {\n    return this.num[index];\n  },\n  getLength: function () {\n    return this.num.length;\n  },\n  multiply: function (e) {\n    var num = new Array(this.getLength() + e.getLength() - 1);\n\n    for (var i = 0; i < this.getLength(); i++) {\n      for (var j = 0; j < e.getLength(); j++) {\n        num[i + j] ^= math.gexp(math.glog(this.get(i)) + math.glog(e.get(j)));\n      }\n    }\n\n    return new QRPolynomial(num, 0);\n  },\n  mod: function (e) {\n    if (this.getLength() - e.getLength() < 0) {\n      return this;\n    }\n\n    var ratio = math.glog(this.get(0)) - math.glog(e.get(0));\n    var num = new Array(this.getLength());\n\n    for (var i = 0; i < this.getLength(); i++) {\n      num[i] = this.get(i);\n    }\n\n    for (var i = 0; i < e.getLength(); i++) {\n      num[i] ^= math.gexp(math.glog(e.get(i)) + ratio);\n    } // recursive call\n\n\n    return new QRPolynomial(num, 0).mod(e);\n  }\n};\nvar Polynomial = QRPolynomial;\n\nvar QRMaskPattern = {\n  PATTERN000: 0,\n  PATTERN001: 1,\n  PATTERN010: 2,\n  PATTERN011: 3,\n  PATTERN100: 4,\n  PATTERN101: 5,\n  PATTERN110: 6,\n  PATTERN111: 7\n};\nvar QRUtil = {\n  PATTERN_POSITION_TABLE: [[], [6, 18], [6, 22], [6, 26], [6, 30], [6, 34], [6, 22, 38], [6, 24, 42], [6, 26, 46], [6, 28, 50], [6, 30, 54], [6, 32, 58], [6, 34, 62], [6, 26, 46, 66], [6, 26, 48, 70], [6, 26, 50, 74], [6, 30, 54, 78], [6, 30, 56, 82], [6, 30, 58, 86], [6, 34, 62, 90], [6, 28, 50, 72, 94], [6, 26, 50, 74, 98], [6, 30, 54, 78, 102], [6, 28, 54, 80, 106], [6, 32, 58, 84, 110], [6, 30, 58, 86, 114], [6, 34, 62, 90, 118], [6, 26, 50, 74, 98, 122], [6, 30, 54, 78, 102, 126], [6, 26, 52, 78, 104, 130], [6, 30, 56, 82, 108, 134], [6, 34, 60, 86, 112, 138], [6, 30, 58, 86, 114, 142], [6, 34, 62, 90, 118, 146], [6, 30, 54, 78, 102, 126, 150], [6, 24, 50, 76, 102, 128, 154], [6, 28, 54, 80, 106, 132, 158], [6, 32, 58, 84, 110, 136, 162], [6, 26, 54, 82, 110, 138, 166], [6, 30, 58, 86, 114, 142, 170]],\n  G15: 1 << 10 | 1 << 8 | 1 << 5 | 1 << 4 | 1 << 2 | 1 << 1 | 1 << 0,\n  G18: 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0,\n  G15_MASK: 1 << 14 | 1 << 12 | 1 << 10 | 1 << 4 | 1 << 1,\n  getBCHTypeInfo: function (data) {\n    var d = data << 10;\n\n    while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15) >= 0) {\n      d ^= QRUtil.G15 << QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15);\n    }\n\n    return (data << 10 | d) ^ QRUtil.G15_MASK;\n  },\n  getBCHTypeNumber: function (data) {\n    var d = data << 12;\n\n    while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18) >= 0) {\n      d ^= QRUtil.G18 << QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18);\n    }\n\n    return data << 12 | d;\n  },\n  getBCHDigit: function (data) {\n    var digit = 0;\n\n    while (data != 0) {\n      digit++;\n      data >>>= 1;\n    }\n\n    return digit;\n  },\n  getPatternPosition: function (typeNumber) {\n    return QRUtil.PATTERN_POSITION_TABLE[typeNumber - 1];\n  },\n  getMask: function (maskPattern, i, j) {\n    switch (maskPattern) {\n      case QRMaskPattern.PATTERN000:\n        return (i + j) % 2 == 0;\n\n      case QRMaskPattern.PATTERN001:\n        return i % 2 == 0;\n\n      case QRMaskPattern.PATTERN010:\n        return j % 3 == 0;\n\n      case QRMaskPattern.PATTERN011:\n        return (i + j) % 3 == 0;\n\n      case QRMaskPattern.PATTERN100:\n        return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 == 0;\n\n      case QRMaskPattern.PATTERN101:\n        return i * j % 2 + i * j % 3 == 0;\n\n      case QRMaskPattern.PATTERN110:\n        return (i * j % 2 + i * j % 3) % 2 == 0;\n\n      case QRMaskPattern.PATTERN111:\n        return (i * j % 3 + (i + j) % 2) % 2 == 0;\n\n      default:\n        throw new Error(\"bad maskPattern:\" + maskPattern);\n    }\n  },\n  getErrorCorrectPolynomial: function (errorCorrectLength) {\n    var a = new Polynomial([1], 0);\n\n    for (var i = 0; i < errorCorrectLength; i++) {\n      a = a.multiply(new Polynomial([1, math.gexp(i)], 0));\n    }\n\n    return a;\n  },\n  getLengthInBits: function (mode$$1, type) {\n    if (1 <= type && type < 10) {\n      // 1 - 9\n      switch (mode$$1) {\n        case mode.MODE_NUMBER:\n          return 10;\n\n        case mode.MODE_ALPHA_NUM:\n          return 9;\n\n        case mode.MODE_8BIT_BYTE:\n          return 8;\n\n        case mode.MODE_KANJI:\n          return 8;\n\n        default:\n          throw new Error(\"mode:\" + mode$$1);\n      }\n    } else if (type < 27) {\n      // 10 - 26\n      switch (mode$$1) {\n        case mode.MODE_NUMBER:\n          return 12;\n\n        case mode.MODE_ALPHA_NUM:\n          return 11;\n\n        case mode.MODE_8BIT_BYTE:\n          return 16;\n\n        case mode.MODE_KANJI:\n          return 10;\n\n        default:\n          throw new Error(\"mode:\" + mode$$1);\n      }\n    } else if (type < 41) {\n      // 27 - 40\n      switch (mode$$1) {\n        case mode.MODE_NUMBER:\n          return 14;\n\n        case mode.MODE_ALPHA_NUM:\n          return 13;\n\n        case mode.MODE_8BIT_BYTE:\n          return 16;\n\n        case mode.MODE_KANJI:\n          return 12;\n\n        default:\n          throw new Error(\"mode:\" + mode$$1);\n      }\n    } else {\n      throw new Error(\"type:\" + type);\n    }\n  },\n  getLostPoint: function (qrCode) {\n    var moduleCount = qrCode.getModuleCount();\n    var lostPoint = 0; // LEVEL1\n\n    for (var row = 0; row < moduleCount; row++) {\n      for (var col = 0; col < moduleCount; col++) {\n        var sameCount = 0;\n        var dark = qrCode.isDark(row, col);\n\n        for (var r = -1; r <= 1; r++) {\n          if (row + r < 0 || moduleCount <= row + r) {\n            continue;\n          }\n\n          for (var c = -1; c <= 1; c++) {\n            if (col + c < 0 || moduleCount <= col + c) {\n              continue;\n            }\n\n            if (r == 0 && c == 0) {\n              continue;\n            }\n\n            if (dark == qrCode.isDark(row + r, col + c)) {\n              sameCount++;\n            }\n          }\n        }\n\n        if (sameCount > 5) {\n          lostPoint += 3 + sameCount - 5;\n        }\n      }\n    } // LEVEL2\n\n\n    for (var row = 0; row < moduleCount - 1; row++) {\n      for (var col = 0; col < moduleCount - 1; col++) {\n        var count = 0;\n        if (qrCode.isDark(row, col)) count++;\n        if (qrCode.isDark(row + 1, col)) count++;\n        if (qrCode.isDark(row, col + 1)) count++;\n        if (qrCode.isDark(row + 1, col + 1)) count++;\n\n        if (count == 0 || count == 4) {\n          lostPoint += 3;\n        }\n      }\n    } // LEVEL3\n\n\n    for (var row = 0; row < moduleCount; row++) {\n      for (var col = 0; col < moduleCount - 6; col++) {\n        if (qrCode.isDark(row, col) && !qrCode.isDark(row, col + 1) && qrCode.isDark(row, col + 2) && qrCode.isDark(row, col + 3) && qrCode.isDark(row, col + 4) && !qrCode.isDark(row, col + 5) && qrCode.isDark(row, col + 6)) {\n          lostPoint += 40;\n        }\n      }\n    }\n\n    for (var col = 0; col < moduleCount; col++) {\n      for (var row = 0; row < moduleCount - 6; row++) {\n        if (qrCode.isDark(row, col) && !qrCode.isDark(row + 1, col) && qrCode.isDark(row + 2, col) && qrCode.isDark(row + 3, col) && qrCode.isDark(row + 4, col) && !qrCode.isDark(row + 5, col) && qrCode.isDark(row + 6, col)) {\n          lostPoint += 40;\n        }\n      }\n    } // LEVEL4\n\n\n    var darkCount = 0;\n\n    for (var col = 0; col < moduleCount; col++) {\n      for (var row = 0; row < moduleCount; row++) {\n        if (qrCode.isDark(row, col)) {\n          darkCount++;\n        }\n      }\n    }\n\n    var ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;\n    lostPoint += ratio * 10;\n    return lostPoint;\n  }\n};\nvar util = QRUtil;\n\nfunction QRCode(typeNumber, errorCorrectLevel) {\n  this.typeNumber = typeNumber;\n  this.errorCorrectLevel = errorCorrectLevel;\n  this.modules = null;\n  this.moduleCount = 0;\n  this.dataCache = null;\n  this.dataList = [];\n} // for client side minification\n\n\nvar proto = QRCode.prototype;\n\nproto.addData = function (data) {\n  var newData = new _8BitByte(data);\n  this.dataList.push(newData);\n  this.dataCache = null;\n};\n\nproto.isDark = function (row, col) {\n  if (row < 0 || this.moduleCount <= row || col < 0 || this.moduleCount <= col) {\n    throw new Error(row + \",\" + col);\n  }\n\n  return this.modules[row][col];\n};\n\nproto.getModuleCount = function () {\n  return this.moduleCount;\n};\n\nproto.make = function () {\n  // Calculate automatically typeNumber if provided is < 1\n  if (this.typeNumber < 1) {\n    var typeNumber = 1;\n\n    for (typeNumber = 1; typeNumber < 40; typeNumber++) {\n      var rsBlocks = RSBlock.getRSBlocks(typeNumber, this.errorCorrectLevel);\n      var buffer = new BitBuffer();\n      var totalDataCount = 0;\n\n      for (var i = 0; i < rsBlocks.length; i++) {\n        totalDataCount += rsBlocks[i].dataCount;\n      }\n\n      for (var i = 0; i < this.dataList.length; i++) {\n        var data = this.dataList[i];\n        buffer.put(data.mode, 4);\n        buffer.put(data.getLength(), util.getLengthInBits(data.mode, typeNumber));\n        data.write(buffer);\n      }\n\n      if (buffer.getLengthInBits() <= totalDataCount * 8) break;\n    }\n\n    this.typeNumber = typeNumber;\n  }\n\n  this.makeImpl(false, this.getBestMaskPattern());\n};\n\nproto.makeImpl = function (test, maskPattern) {\n  this.moduleCount = this.typeNumber * 4 + 17;\n  this.modules = new Array(this.moduleCount);\n\n  for (var row = 0; row < this.moduleCount; row++) {\n    this.modules[row] = new Array(this.moduleCount);\n\n    for (var col = 0; col < this.moduleCount; col++) {\n      this.modules[row][col] = null; //(col + row) % 3;\n    }\n  }\n\n  this.setupPositionProbePattern(0, 0);\n  this.setupPositionProbePattern(this.moduleCount - 7, 0);\n  this.setupPositionProbePattern(0, this.moduleCount - 7);\n  this.setupPositionAdjustPattern();\n  this.setupTimingPattern();\n  this.setupTypeInfo(test, maskPattern);\n\n  if (this.typeNumber >= 7) {\n    this.setupTypeNumber(test);\n  }\n\n  if (this.dataCache == null) {\n    this.dataCache = QRCode.createData(this.typeNumber, this.errorCorrectLevel, this.dataList);\n  }\n\n  this.mapData(this.dataCache, maskPattern);\n};\n\nproto.setupPositionProbePattern = function (row, col) {\n  for (var r = -1; r <= 7; r++) {\n    if (row + r <= -1 || this.moduleCount <= row + r) continue;\n\n    for (var c = -1; c <= 7; c++) {\n      if (col + c <= -1 || this.moduleCount <= col + c) continue;\n\n      if (0 <= r && r <= 6 && (c == 0 || c == 6) || 0 <= c && c <= 6 && (r == 0 || r == 6) || 2 <= r && r <= 4 && 2 <= c && c <= 4) {\n        this.modules[row + r][col + c] = true;\n      } else {\n        this.modules[row + r][col + c] = false;\n      }\n    }\n  }\n};\n\nproto.getBestMaskPattern = function () {\n  var minLostPoint = 0;\n  var pattern = 0;\n\n  for (var i = 0; i < 8; i++) {\n    this.makeImpl(true, i);\n    var lostPoint = util.getLostPoint(this);\n\n    if (i == 0 || minLostPoint > lostPoint) {\n      minLostPoint = lostPoint;\n      pattern = i;\n    }\n  }\n\n  return pattern;\n};\n\nproto.createMovieClip = function (target_mc, instance_name, depth) {\n  var qr_mc = target_mc.createEmptyMovieClip(instance_name, depth);\n  var cs = 1;\n  this.make();\n\n  for (var row = 0; row < this.modules.length; row++) {\n    var y = row * cs;\n\n    for (var col = 0; col < this.modules[row].length; col++) {\n      var x = col * cs;\n      var dark = this.modules[row][col];\n\n      if (dark) {\n        qr_mc.beginFill(0, 100);\n        qr_mc.moveTo(x, y);\n        qr_mc.lineTo(x + cs, y);\n        qr_mc.lineTo(x + cs, y + cs);\n        qr_mc.lineTo(x, y + cs);\n        qr_mc.endFill();\n      }\n    }\n  }\n\n  return qr_mc;\n};\n\nproto.setupTimingPattern = function () {\n  for (var r = 8; r < this.moduleCount - 8; r++) {\n    if (this.modules[r][6] != null) {\n      continue;\n    }\n\n    this.modules[r][6] = r % 2 == 0;\n  }\n\n  for (var c = 8; c < this.moduleCount - 8; c++) {\n    if (this.modules[6][c] != null) {\n      continue;\n    }\n\n    this.modules[6][c] = c % 2 == 0;\n  }\n};\n\nproto.setupPositionAdjustPattern = function () {\n  var pos = util.getPatternPosition(this.typeNumber);\n\n  for (var i = 0; i < pos.length; i++) {\n    for (var j = 0; j < pos.length; j++) {\n      var row = pos[i];\n      var col = pos[j];\n\n      if (this.modules[row][col] != null) {\n        continue;\n      }\n\n      for (var r = -2; r <= 2; r++) {\n        for (var c = -2; c <= 2; c++) {\n          if (r == -2 || r == 2 || c == -2 || c == 2 || r == 0 && c == 0) {\n            this.modules[row + r][col + c] = true;\n          } else {\n            this.modules[row + r][col + c] = false;\n          }\n        }\n      }\n    }\n  }\n};\n\nproto.setupTypeNumber = function (test) {\n  var bits = util.getBCHTypeNumber(this.typeNumber);\n\n  for (var i = 0; i < 18; i++) {\n    var mod = !test && (bits >> i & 1) == 1;\n    this.modules[Math.floor(i / 3)][i % 3 + this.moduleCount - 8 - 3] = mod;\n  }\n\n  for (var i = 0; i < 18; i++) {\n    var mod = !test && (bits >> i & 1) == 1;\n    this.modules[i % 3 + this.moduleCount - 8 - 3][Math.floor(i / 3)] = mod;\n  }\n};\n\nproto.setupTypeInfo = function (test, maskPattern) {\n  var data = this.errorCorrectLevel << 3 | maskPattern;\n  var bits = util.getBCHTypeInfo(data); // vertical\t\t\n\n  for (var i = 0; i < 15; i++) {\n    var mod = !test && (bits >> i & 1) == 1;\n\n    if (i < 6) {\n      this.modules[i][8] = mod;\n    } else if (i < 8) {\n      this.modules[i + 1][8] = mod;\n    } else {\n      this.modules[this.moduleCount - 15 + i][8] = mod;\n    }\n  } // horizontal\n\n\n  for (var i = 0; i < 15; i++) {\n    var mod = !test && (bits >> i & 1) == 1;\n\n    if (i < 8) {\n      this.modules[8][this.moduleCount - i - 1] = mod;\n    } else if (i < 9) {\n      this.modules[8][15 - i - 1 + 1] = mod;\n    } else {\n      this.modules[8][15 - i - 1] = mod;\n    }\n  } // fixed module\n\n\n  this.modules[this.moduleCount - 8][8] = !test;\n};\n\nproto.mapData = function (data, maskPattern) {\n  var inc = -1;\n  var row = this.moduleCount - 1;\n  var bitIndex = 7;\n  var byteIndex = 0;\n\n  for (var col = this.moduleCount - 1; col > 0; col -= 2) {\n    if (col == 6) col--;\n\n    while (true) {\n      for (var c = 0; c < 2; c++) {\n        if (this.modules[row][col - c] == null) {\n          var dark = false;\n\n          if (byteIndex < data.length) {\n            dark = (data[byteIndex] >>> bitIndex & 1) == 1;\n          }\n\n          var mask = util.getMask(maskPattern, row, col - c);\n\n          if (mask) {\n            dark = !dark;\n          }\n\n          this.modules[row][col - c] = dark;\n          bitIndex--;\n\n          if (bitIndex == -1) {\n            byteIndex++;\n            bitIndex = 7;\n          }\n        }\n      }\n\n      row += inc;\n\n      if (row < 0 || this.moduleCount <= row) {\n        row -= inc;\n        inc = -inc;\n        break;\n      }\n    }\n  }\n};\n\nQRCode.PAD0 = 0xEC;\nQRCode.PAD1 = 0x11;\n\nQRCode.createData = function (typeNumber, errorCorrectLevel, dataList) {\n  var rsBlocks = RSBlock.getRSBlocks(typeNumber, errorCorrectLevel);\n  var buffer = new BitBuffer();\n\n  for (var i = 0; i < dataList.length; i++) {\n    var data = dataList[i];\n    buffer.put(data.mode, 4);\n    buffer.put(data.getLength(), util.getLengthInBits(data.mode, typeNumber));\n    data.write(buffer);\n  } // calc num max data.\n\n\n  var totalDataCount = 0;\n\n  for (var i = 0; i < rsBlocks.length; i++) {\n    totalDataCount += rsBlocks[i].dataCount;\n  }\n\n  if (buffer.getLengthInBits() > totalDataCount * 8) {\n    throw new Error(\"code length overflow. (\" + buffer.getLengthInBits() + \">\" + totalDataCount * 8 + \")\");\n  } // end code\n\n\n  if (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {\n    buffer.put(0, 4);\n  } // padding\n\n\n  while (buffer.getLengthInBits() % 8 != 0) {\n    buffer.putBit(false);\n  } // padding\n\n\n  while (true) {\n    if (buffer.getLengthInBits() >= totalDataCount * 8) {\n      break;\n    }\n\n    buffer.put(QRCode.PAD0, 8);\n\n    if (buffer.getLengthInBits() >= totalDataCount * 8) {\n      break;\n    }\n\n    buffer.put(QRCode.PAD1, 8);\n  }\n\n  return QRCode.createBytes(buffer, rsBlocks);\n};\n\nQRCode.createBytes = function (buffer, rsBlocks) {\n  var offset = 0;\n  var maxDcCount = 0;\n  var maxEcCount = 0;\n  var dcdata = new Array(rsBlocks.length);\n  var ecdata = new Array(rsBlocks.length);\n\n  for (var r = 0; r < rsBlocks.length; r++) {\n    var dcCount = rsBlocks[r].dataCount;\n    var ecCount = rsBlocks[r].totalCount - dcCount;\n    maxDcCount = Math.max(maxDcCount, dcCount);\n    maxEcCount = Math.max(maxEcCount, ecCount);\n    dcdata[r] = new Array(dcCount);\n\n    for (var i = 0; i < dcdata[r].length; i++) {\n      dcdata[r][i] = 0xff & buffer.buffer[i + offset];\n    }\n\n    offset += dcCount;\n    var rsPoly = util.getErrorCorrectPolynomial(ecCount);\n    var rawPoly = new Polynomial(dcdata[r], rsPoly.getLength() - 1);\n    var modPoly = rawPoly.mod(rsPoly);\n    ecdata[r] = new Array(rsPoly.getLength() - 1);\n\n    for (var i = 0; i < ecdata[r].length; i++) {\n      var modIndex = i + modPoly.getLength() - ecdata[r].length;\n      ecdata[r][i] = modIndex >= 0 ? modPoly.get(modIndex) : 0;\n    }\n  }\n\n  var totalCodeCount = 0;\n\n  for (var i = 0; i < rsBlocks.length; i++) {\n    totalCodeCount += rsBlocks[i].totalCount;\n  }\n\n  var data = new Array(totalCodeCount);\n  var index = 0;\n\n  for (var i = 0; i < maxDcCount; i++) {\n    for (var r = 0; r < rsBlocks.length; r++) {\n      if (i < dcdata[r].length) {\n        data[index++] = dcdata[r][i];\n      }\n    }\n  }\n\n  for (var i = 0; i < maxEcCount; i++) {\n    for (var r = 0; r < rsBlocks.length; r++) {\n      if (i < ecdata[r].length) {\n        data[index++] = ecdata[r][i];\n      }\n    }\n  }\n\n  return data;\n};\n\nvar QRCode_1 = QRCode;\n\nfunction getBackingStorePixelRatio(ctx) {\n  return ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1;\n}\n/**\n * Encode UTF16 to UTF8.\n * See: http://jonisalonen.com/2012/from-utf-16-to-utf-8-in-javascript/\n * @param str {string}\n * @returns {string}\n */\n\n\nfunction toUTF8String(str) {\n  var utf8Str = '';\n\n  for (var i = 0; i < str.length; i++) {\n    var charCode = str.charCodeAt(i);\n\n    if (charCode < 0x0080) {\n      utf8Str += String.fromCharCode(charCode);\n    } else if (charCode < 0x0800) {\n      utf8Str += String.fromCharCode(0xc0 | charCode >> 6);\n      utf8Str += String.fromCharCode(0x80 | charCode & 0x3f);\n    } else if (charCode < 0xd800 || charCode >= 0xe000) {\n      utf8Str += String.fromCharCode(0xe0 | charCode >> 12);\n      utf8Str += String.fromCharCode(0x80 | charCode >> 6 & 0x3f);\n      utf8Str += String.fromCharCode(0x80 | charCode & 0x3f);\n    } else {\n      // surrogate pair\n      i++; // UTF-16 encodes 0x10000-0x10FFFF by\n      // subtracting 0x10000 and splitting the\n      // 20 bits of 0x0-0xFFFFF into two halves\n\n      charCode = 0x10000 + ((charCode & 0x3ff) << 10 | str.charCodeAt(i) & 0x3ff);\n      utf8Str += String.fromCharCode(0xf0 | charCode >> 18);\n      utf8Str += String.fromCharCode(0x80 | charCode >> 12 & 0x3f);\n      utf8Str += String.fromCharCode(0x80 | charCode >> 6 & 0x3f);\n      utf8Str += String.fromCharCode(0x80 | charCode & 0x3f);\n    }\n  }\n\n  return utf8Str;\n}\n\nvar QrcodeVue = {\n  render: function render(createElement) {\n    var className = this.className,\n        value = this.value,\n        level = this.level,\n        background = this.background,\n        foreground = this.foreground,\n        size = this.size;\n    return createElement('div', {\n      'class': className,\n      attrs: {\n        value: value,\n        level: level,\n        background: background,\n        foreground: foreground\n      }\n    }, [createElement('canvas', {\n      attrs: {\n        height: size,\n        width: size\n      },\n      style: {\n        width: size + 'px',\n        height: size + 'px'\n      },\n      ref: 'qrcode-vue'\n    }, [])]);\n  },\n  props: {\n    value: {\n      type: String,\n      required: true,\n      default: ''\n    },\n    className: {\n      type: String,\n      default: ''\n    },\n    size: {\n      type: [Number, String],\n      default: 100,\n      validator: function validator(s) {\n        return isNaN(Number(s)) !== true;\n      }\n    },\n    level: {\n      type: String,\n      default: 'L',\n      validator: function validator(l) {\n        return ['L', 'Q', 'M', 'H'].indexOf(l) > -1;\n      }\n    },\n    background: {\n      type: String,\n      default: '#fff'\n    },\n    foreground: {\n      type: String,\n      default: '#000'\n    }\n  },\n  methods: {\n    render: function render() {\n      var value = this.value,\n          size = this.size,\n          level = this.level,\n          background = this.background,\n          foreground = this.foreground;\n\n      var _size = size >>> 0; // size to number\n      // We'll use type===-1 to force QRCode to automatically pick the best type\n\n\n      var qrCode = new QRCode_1(-1, ErrorCorrectLevel[level]);\n      qrCode.addData(toUTF8String(value));\n      qrCode.make();\n      var canvas = this.$refs['qrcode-vue'];\n      var ctx = canvas.getContext('2d');\n      var cells = qrCode.modules;\n      var tileW = _size / cells.length;\n      var tileH = _size / cells.length;\n      var scale = (window.devicePixelRatio || 1) / getBackingStorePixelRatio(ctx);\n      canvas.height = canvas.width = _size * scale;\n      ctx.scale(scale, scale);\n      cells.forEach(function (row, rdx) {\n        row.forEach(function (cell, cdx) {\n          ctx.fillStyle = cell ? foreground : background;\n          var w = Math.ceil((cdx + 1) * tileW) - Math.floor(cdx * tileW);\n          var h = Math.ceil((rdx + 1) * tileH) - Math.floor(rdx * tileH);\n          ctx.fillRect(Math.round(cdx * tileW), Math.round(rdx * tileH), w, h);\n        });\n      });\n    }\n  },\n  updated: function updated() {\n    this.render();\n  },\n  mounted: function mounted() {\n    this.render();\n  }\n};\n\nexport default QrcodeVue;\n"],"sourceRoot":""}