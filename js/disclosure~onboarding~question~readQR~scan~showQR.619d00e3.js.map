{"version":3,"sources":["webpack:///./node_modules/@babel/runtime/helpers/builtin/es6/asyncToGenerator.js","webpack:///./node_modules/regenerator-runtime/runtime.js","webpack:///./src/api.js"],"names":["_asyncToGenerator","fn","self","this","args","arguments","Promise","resolve","reject","gen","apply","step","key","arg","info","value","error","done","then","_next","_throw","err","__webpack_require__","d","__webpack_exports__","global","undefined","Op","Object","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","inModule","module","runtime","regeneratorRuntime","exports","wrap","GenStateSuspendedStart","GenStateSuspendedYield","GenStateExecuting","GenStateCompleted","ContinueSentinel","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","call","Gp","GeneratorFunctionPrototype","Generator","create","GeneratorFunction","constructor","displayName","isGeneratorFunction","genFun","ctor","name","mark","setPrototypeOf","__proto__","awrap","__await","defineIteratorMethods","AsyncIterator","async","innerFn","outerFn","tryLocsList","iter","next","result","toString","keys","object","push","reverse","length","pop","Context","reset","skipTempReset","prev","sent","_sent","delegate","method","tryEntries","forEach","resetTryEntry","charAt","isNaN","slice","stop","rootEntry","rootRecord","completion","type","rval","dispatchException","exception","context","handle","loc","caught","record","i","entry","tryLoc","hasCatch","hasFinally","catchLoc","finallyLoc","Error","abrupt","finallyEntry","complete","afterLoc","finish","catch","thrown","delegateYield","iterable","resultName","nextLoc","protoGenerator","generator","_invoke","makeInvokeMethod","tryCatch","obj","invoke","unwrapped","previousPromise","enqueue","callInvokeWithMethodAndArg","state","doneResult","delegateResult","maybeInvokeDelegate","return","TypeError","pushTryEntry","locs","iteratorMethod","Function","DECODE_SERVER","process","getSession","_x2","_x3","_getSession","_callee2","attribute_request","description","url","response","_context2","fetch","body","JSON","stringify","json","getFullSession","_x4","_getFullSession","_callee3","sessionId","_context3","session_id","attachPublicKey","_x5","_x6","_attachPublicKey","_callee4","publicKey","_context4","public_key","getSessionStatus","_x8","_getSessionStatus","_callee6","_context6","getRequest","_x9","_getRequest","_callee7","_context7","acceptRequest","_x10","_x11","_acceptRequest","_callee8","username","_context8","denyRequest","_x12","_denyRequest","_callee9","_context9","createQuestion","_x13","_x14","_createQuestion","_callee10","question","_context10"],"mappings":"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","file":"js/disclosure~onboarding~question~readQR~scan~showQR.619d00e3.js","sourcesContent":["export default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function step(key, arg) {\n        try {\n          var info = gen[key](arg);\n          var value = info.value;\n        } catch (error) {\n          reject(error);\n          return;\n        }\n\n        if (info.done) {\n          resolve(value);\n        } else {\n          Promise.resolve(value).then(_next, _throw);\n        }\n      }\n\n      function _next(value) {\n        step(\"next\", value);\n      }\n\n      function _throw(err) {\n        step(\"throw\", err);\n      }\n\n      _next();\n    });\n  };\n}","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration. If the Promise is rejected, however, the\n          // result for this iteration will be rejected with the same\n          // reason. Note that rejections of yielded Promises are not\n          // thrown back into the generator function, as is the case\n          // when an awaited Promise is rejected. This difference in\n          // behavior between yield and await is important, because it\n          // allows the consumer to decide what to do with the yielded\n          // rejection (swallow it and continue, manually .throw it back\n          // into the generator, abandon iteration, whatever). With\n          // await, by contrast, there is no opportunity to examine the\n          // rejection reason outside the generator function, so the\n          // only option is to throw it from the await expression, and\n          // let the generator function handle the exception.\n          result.value = unwrapped;\n          resolve(result);\n        }, reject);\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() { return this })() || Function(\"return this\")()\n);\n","const DECODE_SERVER = process.env.VUE_APP_API;\n\nexport async function get_data(path) {\n  var url = DECODE_SERVER + path;\n  var result = await fetch(url);\n  return result;\n}\n\nexport async function getSession(attribute_request, description) {\n  const url = DECODE_SERVER + \"init_disclosure\";\n  const response = await fetch(url, {\n    method: \"POST\",\n    body: JSON.stringify({\n      attribute_request,\n      description\n    })\n  });\n  return response.json();\n}\n\nexport async function getFullSession(sessionId) {\n  const url = DECODE_SERVER + \"get_session\";\n  const response = await fetch(url, {\n    method: \"POST\",\n    body: JSON.stringify({\n      session_id: sessionId\n    })\n  });\n  return response.json();\n}\n\nexport async function attachPublicKey(publicKey, sessionId) {\n  const url = DECODE_SERVER + \"attach_public_key\";\n  const response = await fetch(url, {\n    method: \"POST\",\n    body: JSON.stringify({\n      public_key: publicKey,\n      session_id: sessionId\n    })\n  });\n  return response.json();\n}\n\nexport async function getPictureUrl(username) {\n  const url = DECODE_SERVER + \"get_picture_url\";\n  const response = await fetch(url, {\n    method: \"POST\",\n    body: JSON.stringify({\n      username\n    })\n  });\n  return response.json();\n}\n\nexport async function getSessionStatus(sessionId) {\n  const url = DECODE_SERVER + \"get_session_status\";\n  const response = await fetch(url, {\n    method: \"POST\",\n    body: JSON.stringify({\n      session_id: sessionId\n    })\n  });\n  return response.json();\n}\n\nexport async function getRequest(sessionId) {\n  const url = DECODE_SERVER + \"get_session\";\n  const response = await fetch(url, {\n    method: \"POST\",\n    body: JSON.stringify({\n      session_id: sessionId\n    })\n  });\n  return response.json();\n}\n\nexport async function acceptRequest(sessionId, username) {\n  const url = DECODE_SERVER + \"accept_request\";\n  const response = await fetch(url, {\n    method: \"POST\",\n    body: JSON.stringify({\n      session_id: sessionId,\n      username: username\n    })\n  });\n  return response.json();\n}\n\nexport async function denyRequest(sessionId) {\n  const url = DECODE_SERVER + \"deny_request\";\n  const response = await fetch(url, {\n    method: \"POST\",\n    body: JSON.stringify({\n      session_id: sessionId\n    })\n  });\n  return response.json();\n}\n\nexport async function createQuestion(description, question) {\n  const url = DECODE_SERVER + \"init_disclosure\";\n  const response = await fetch(url, {\n    method: \"POST\",\n    body: JSON.stringify({\n      description: description,\n      attribute_request: question\n    })\n  });\n  return response.json();\n}"],"sourceRoot":""}